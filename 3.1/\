use std::io;

fn main()
{
    let data = io::stdin().lines();
    let mut sum = 0;

    let mut string_vector = Vec::new();

    for line in data {
        let string = line.unwrap();
        if string.len() == 0 {
            break;
        }

        string_vector.push(string);
    }

    let mut digits = Vec::new();
    let mut number_indices = Vec::new();

    let mut next_index = 0;

    for string in string_vector {
        let mut num_started = false;
        let mut temp_digits = Vec::new();
        let mut index_row = Vec::new();

        for character in string.chars() {
            if character.is_digit(10) {
                temp_digits.push(character.to_digit(10));
                num_started = true;

                index_row.push(next_index);
            } else if num_started {
                digits.push(temp_digits.clone());
                temp_digits.clear();

                num_started = false;
                next_index += 1;
                index_row.push(-1);
            } else {
                index_row.push(-1);
            }
        }

        number_indices.push(index_row.clone());
        index_row.clear();
    }

    let mut numbers = Vec::new();
    for number in digits {
        let mut val = 0;
        for (i, digit) in number.into_iter().rev().enumerate() {
            val += digit.unwrap() as i32 * 10_i32.pow(i);
        }
    }

    for string in string_vector {
        for character in string.chars() {
            if !character.is_digit(10) {
            }
        }
    }

    for val in numbers {
        println!("{:?}", val);
    }

    println!("{:}", sum);
}
